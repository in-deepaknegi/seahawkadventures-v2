generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    userId    String    @unique
    name      String
    email     String    @unique
    phone     String
    bookings  Booking[]
    payments  Payment[]
    joinedAt  DateTime  @default(now())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Booking {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    bookingId String   @unique
    customer  String
    package   String
    amount    Float
    date      DateTime
    status    BookingStatus @default(PENDING)
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    paymentId         String        @unique
    razorpayOrderId   String        @unique
    razorpayPaymentId String?
    status            PaymentStatus @default(FAILED)
    amount            Float
    currency          String        @default("INR")
    receiptId         String?
    userId            String        @db.ObjectId
    user              User          @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Newsletter {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String
    subject   String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PaymentStatus {
    PENDING
    SUCCESS
    FAILED
}

enum BookingStatus {
    PENDING
    SUCCESS
    FAILED
}

